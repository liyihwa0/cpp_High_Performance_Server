// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_framework.proto

#ifndef PROTOBUF_INCLUDED_rpc_5fframework_2eproto
#define PROTOBUF_INCLUDED_rpc_5fframework_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rpc_5fframework_2eproto 

namespace protobuf_rpc_5fframework_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rpc_5fframework_2eproto
namespace wa {
namespace rpc {
class FrameworkRequestHeader;
class FrameworkRequestHeaderDefaultTypeInternal;
extern FrameworkRequestHeaderDefaultTypeInternal _FrameworkRequestHeader_default_instance_;
class FrameworkResponseHeader;
class FrameworkResponseHeaderDefaultTypeInternal;
extern FrameworkResponseHeaderDefaultTypeInternal _FrameworkResponseHeader_default_instance_;
}  // namespace rpc
}  // namespace wa
namespace google {
namespace protobuf {
template<> ::wa::rpc::FrameworkRequestHeader* Arena::CreateMaybeMessage<::wa::rpc::FrameworkRequestHeader>(Arena*);
template<> ::wa::rpc::FrameworkResponseHeader* Arena::CreateMaybeMessage<::wa::rpc::FrameworkResponseHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace wa {
namespace rpc {

// ===================================================================

class FrameworkRequestHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wa.rpc.FrameworkRequestHeader) */ {
 public:
  FrameworkRequestHeader();
  virtual ~FrameworkRequestHeader();

  FrameworkRequestHeader(const FrameworkRequestHeader& from);

  inline FrameworkRequestHeader& operator=(const FrameworkRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameworkRequestHeader(FrameworkRequestHeader&& from) noexcept
    : FrameworkRequestHeader() {
    *this = ::std::move(from);
  }

  inline FrameworkRequestHeader& operator=(FrameworkRequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameworkRequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameworkRequestHeader* internal_default_instance() {
    return reinterpret_cast<const FrameworkRequestHeader*>(
               &_FrameworkRequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FrameworkRequestHeader* other);
  friend void swap(FrameworkRequestHeader& a, FrameworkRequestHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameworkRequestHeader* New() const final {
    return CreateMaybeMessage<FrameworkRequestHeader>(NULL);
  }

  FrameworkRequestHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameworkRequestHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameworkRequestHeader& from);
  void MergeFrom(const FrameworkRequestHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameworkRequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes serviceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicename(::std::string&& value);
  #endif
  void set_servicename(const char* value);
  void set_servicename(const void* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // bytes methodName = 2;
  void clear_methodname();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& methodname() const;
  void set_methodname(const ::std::string& value);
  #if LANG_CXX11
  void set_methodname(::std::string&& value);
  #endif
  void set_methodname(const char* value);
  void set_methodname(const void* value, size_t size);
  ::std::string* mutable_methodname();
  ::std::string* release_methodname();
  void set_allocated_methodname(::std::string* methodname);

  // uint32 argsSize = 3;
  void clear_argssize();
  static const int kArgsSizeFieldNumber = 3;
  ::google::protobuf::uint32 argssize() const;
  void set_argssize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wa.rpc.FrameworkRequestHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::google::protobuf::internal::ArenaStringPtr methodname_;
  ::google::protobuf::uint32 argssize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_5fframework_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameworkResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wa.rpc.FrameworkResponseHeader) */ {
 public:
  FrameworkResponseHeader();
  virtual ~FrameworkResponseHeader();

  FrameworkResponseHeader(const FrameworkResponseHeader& from);

  inline FrameworkResponseHeader& operator=(const FrameworkResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameworkResponseHeader(FrameworkResponseHeader&& from) noexcept
    : FrameworkResponseHeader() {
    *this = ::std::move(from);
  }

  inline FrameworkResponseHeader& operator=(FrameworkResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameworkResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameworkResponseHeader* internal_default_instance() {
    return reinterpret_cast<const FrameworkResponseHeader*>(
               &_FrameworkResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FrameworkResponseHeader* other);
  friend void swap(FrameworkResponseHeader& a, FrameworkResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameworkResponseHeader* New() const final {
    return CreateMaybeMessage<FrameworkResponseHeader>(NULL);
  }

  FrameworkResponseHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameworkResponseHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameworkResponseHeader& from);
  void MergeFrom(const FrameworkResponseHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameworkResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // uint32 responseSize = 2;
  void clear_responsesize();
  static const int kResponseSizeFieldNumber = 2;
  ::google::protobuf::uint32 responsesize() const;
  void set_responsesize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wa.rpc.FrameworkResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 code_;
  ::google::protobuf::uint32 responsesize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_5fframework_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameworkRequestHeader

// bytes serviceName = 1;
inline void FrameworkRequestHeader::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameworkRequestHeader::servicename() const {
  // @@protoc_insertion_point(field_get:wa.rpc.FrameworkRequestHeader.serviceName)
  return servicename_.GetNoArena();
}
inline void FrameworkRequestHeader::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wa.rpc.FrameworkRequestHeader.serviceName)
}
#if LANG_CXX11
inline void FrameworkRequestHeader::set_servicename(::std::string&& value) {
  
  servicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wa.rpc.FrameworkRequestHeader.serviceName)
}
#endif
inline void FrameworkRequestHeader::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wa.rpc.FrameworkRequestHeader.serviceName)
}
inline void FrameworkRequestHeader::set_servicename(const void* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wa.rpc.FrameworkRequestHeader.serviceName)
}
inline ::std::string* FrameworkRequestHeader::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:wa.rpc.FrameworkRequestHeader.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameworkRequestHeader::release_servicename() {
  // @@protoc_insertion_point(field_release:wa.rpc.FrameworkRequestHeader.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameworkRequestHeader::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:wa.rpc.FrameworkRequestHeader.serviceName)
}

// bytes methodName = 2;
inline void FrameworkRequestHeader::clear_methodname() {
  methodname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameworkRequestHeader::methodname() const {
  // @@protoc_insertion_point(field_get:wa.rpc.FrameworkRequestHeader.methodName)
  return methodname_.GetNoArena();
}
inline void FrameworkRequestHeader::set_methodname(const ::std::string& value) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wa.rpc.FrameworkRequestHeader.methodName)
}
#if LANG_CXX11
inline void FrameworkRequestHeader::set_methodname(::std::string&& value) {
  
  methodname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wa.rpc.FrameworkRequestHeader.methodName)
}
#endif
inline void FrameworkRequestHeader::set_methodname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wa.rpc.FrameworkRequestHeader.methodName)
}
inline void FrameworkRequestHeader::set_methodname(const void* value, size_t size) {
  
  methodname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wa.rpc.FrameworkRequestHeader.methodName)
}
inline ::std::string* FrameworkRequestHeader::mutable_methodname() {
  
  // @@protoc_insertion_point(field_mutable:wa.rpc.FrameworkRequestHeader.methodName)
  return methodname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameworkRequestHeader::release_methodname() {
  // @@protoc_insertion_point(field_release:wa.rpc.FrameworkRequestHeader.methodName)
  
  return methodname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameworkRequestHeader::set_allocated_methodname(::std::string* methodname) {
  if (methodname != NULL) {
    
  } else {
    
  }
  methodname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodname);
  // @@protoc_insertion_point(field_set_allocated:wa.rpc.FrameworkRequestHeader.methodName)
}

// uint32 argsSize = 3;
inline void FrameworkRequestHeader::clear_argssize() {
  argssize_ = 0u;
}
inline ::google::protobuf::uint32 FrameworkRequestHeader::argssize() const {
  // @@protoc_insertion_point(field_get:wa.rpc.FrameworkRequestHeader.argsSize)
  return argssize_;
}
inline void FrameworkRequestHeader::set_argssize(::google::protobuf::uint32 value) {
  
  argssize_ = value;
  // @@protoc_insertion_point(field_set:wa.rpc.FrameworkRequestHeader.argsSize)
}

// -------------------------------------------------------------------

// FrameworkResponseHeader

// uint32 code = 1;
inline void FrameworkResponseHeader::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 FrameworkResponseHeader::code() const {
  // @@protoc_insertion_point(field_get:wa.rpc.FrameworkResponseHeader.code)
  return code_;
}
inline void FrameworkResponseHeader::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:wa.rpc.FrameworkResponseHeader.code)
}

// uint32 responseSize = 2;
inline void FrameworkResponseHeader::clear_responsesize() {
  responsesize_ = 0u;
}
inline ::google::protobuf::uint32 FrameworkResponseHeader::responsesize() const {
  // @@protoc_insertion_point(field_get:wa.rpc.FrameworkResponseHeader.responseSize)
  return responsesize_;
}
inline void FrameworkResponseHeader::set_responsesize(::google::protobuf::uint32 value) {
  
  responsesize_ = value;
  // @@protoc_insertion_point(field_set:wa.rpc.FrameworkResponseHeader.responseSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace wa

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rpc_5fframework_2eproto
