// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_core_proto.proto

#include "raft_core_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_raft_5fcore_5fproto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry_raft_5fcore_5fproto_2eproto;
namespace wa {
namespace raft {
class LogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry> _instance;
} _LogEntry_default_instance_;
class AppendEntriesArgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesArgs> _instance;
} _AppendEntriesArgs_default_instance_;
class AppendEntriesReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesReply> _instance;
} _AppendEntriesReply_default_instance_;
class RequestVoteArgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteArgs> _instance;
} _RequestVoteArgs_default_instance_;
class RequestVoteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteReply> _instance;
} _RequestVoteReply_default_instance_;
class InstallSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstallSnapshotRequest> _instance;
} _InstallSnapshotRequest_default_instance_;
class InstallSnapshotResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstallSnapshotResponse> _instance;
} _InstallSnapshotResponse_default_instance_;
}  // namespace raft
}  // namespace wa
static void InitDefaultsLogEntry_raft_5fcore_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wa::raft::_LogEntry_default_instance_;
    new (ptr) ::wa::raft::LogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wa::raft::LogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry_raft_5fcore_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogEntry_raft_5fcore_5fproto_2eproto}, {}};

static void InitDefaultsAppendEntriesArgs_raft_5fcore_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wa::raft::_AppendEntriesArgs_default_instance_;
    new (ptr) ::wa::raft::AppendEntriesArgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wa::raft::AppendEntriesArgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AppendEntriesArgs_raft_5fcore_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAppendEntriesArgs_raft_5fcore_5fproto_2eproto}, {
      &scc_info_LogEntry_raft_5fcore_5fproto_2eproto.base,}};

static void InitDefaultsAppendEntriesReply_raft_5fcore_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wa::raft::_AppendEntriesReply_default_instance_;
    new (ptr) ::wa::raft::AppendEntriesReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wa::raft::AppendEntriesReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendEntriesReply_raft_5fcore_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendEntriesReply_raft_5fcore_5fproto_2eproto}, {}};

static void InitDefaultsRequestVoteArgs_raft_5fcore_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wa::raft::_RequestVoteArgs_default_instance_;
    new (ptr) ::wa::raft::RequestVoteArgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wa::raft::RequestVoteArgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteArgs_raft_5fcore_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteArgs_raft_5fcore_5fproto_2eproto}, {}};

static void InitDefaultsRequestVoteReply_raft_5fcore_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wa::raft::_RequestVoteReply_default_instance_;
    new (ptr) ::wa::raft::RequestVoteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wa::raft::RequestVoteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteReply_raft_5fcore_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteReply_raft_5fcore_5fproto_2eproto}, {}};

static void InitDefaultsInstallSnapshotRequest_raft_5fcore_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wa::raft::_InstallSnapshotRequest_default_instance_;
    new (ptr) ::wa::raft::InstallSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wa::raft::InstallSnapshotRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InstallSnapshotRequest_raft_5fcore_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInstallSnapshotRequest_raft_5fcore_5fproto_2eproto}, {}};

static void InitDefaultsInstallSnapshotResponse_raft_5fcore_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wa::raft::_InstallSnapshotResponse_default_instance_;
    new (ptr) ::wa::raft::InstallSnapshotResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wa::raft::InstallSnapshotResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InstallSnapshotResponse_raft_5fcore_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInstallSnapshotResponse_raft_5fcore_5fproto_2eproto}, {}};

void InitDefaults_raft_5fcore_5fproto_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntry_raft_5fcore_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesArgs_raft_5fcore_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesReply_raft_5fcore_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteArgs_raft_5fcore_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteReply_raft_5fcore_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InstallSnapshotRequest_raft_5fcore_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InstallSnapshotResponse_raft_5fcore_5fproto_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_raft_5fcore_5fproto_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_raft_5fcore_5fproto_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_raft_5fcore_5fproto_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_raft_5fcore_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wa::raft::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wa::raft::LogEntry, command_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::LogEntry, logterm_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::LogEntry, logindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesArgs, term_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesArgs, leaderid_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesArgs, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesArgs, prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesArgs, entries_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesArgs, leadercommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesReply, term_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesReply, success_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesReply, updatenextindex_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::AppendEntriesReply, appstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteArgs, term_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteArgs, candidateid_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteArgs, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteArgs, lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteReply, term_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteReply, votegranted_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::RequestVoteReply, votestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotRequest, leaderid_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotRequest, term_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotRequest, lastsnapshotincludeindex_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotRequest, lastsnapshotincludeterm_),
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wa::raft::InstallSnapshotResponse, term_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wa::raft::LogEntry)},
  { 8, -1, sizeof(::wa::raft::AppendEntriesArgs)},
  { 19, -1, sizeof(::wa::raft::AppendEntriesReply)},
  { 28, -1, sizeof(::wa::raft::RequestVoteArgs)},
  { 37, -1, sizeof(::wa::raft::RequestVoteReply)},
  { 45, -1, sizeof(::wa::raft::InstallSnapshotRequest)},
  { 55, -1, sizeof(::wa::raft::InstallSnapshotResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::wa::raft::_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::wa::raft::_AppendEntriesArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::wa::raft::_AppendEntriesReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::wa::raft::_RequestVoteArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::wa::raft::_RequestVoteReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::wa::raft::_InstallSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::wa::raft::_InstallSnapshotResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_raft_5fcore_5fproto_2eproto = {
  {}, AddDescriptors_raft_5fcore_5fproto_2eproto, "raft_core_proto.proto", schemas,
  file_default_instances, TableStruct_raft_5fcore_5fproto_2eproto::offsets,
  file_level_metadata_raft_5fcore_5fproto_2eproto, 7, file_level_enum_descriptors_raft_5fcore_5fproto_2eproto, file_level_service_descriptors_raft_5fcore_5fproto_2eproto,
};

const char descriptor_table_protodef_raft_5fcore_5fproto_2eproto[] =
  "\n\025raft_core_proto.proto\022\007wa.raft\">\n\010LogE"
  "ntry\022\017\n\007Command\030\001 \001(\014\022\017\n\007LogTerm\030\002 \001(\005\022\020"
  "\n\010LogIndex\030\003 \001(\005\"\230\001\n\021AppendEntriesArgs\022\014"
  "\n\004Term\030\001 \001(\005\022\020\n\010LeaderId\030\002 \001(\005\022\024\n\014PrevLo"
  "gIndex\030\003 \001(\005\022\023\n\013PrevLogTerm\030\004 \001(\005\022\"\n\007Ent"
  "ries\030\005 \003(\0132\021.wa.raft.LogEntry\022\024\n\014LeaderC"
  "ommit\030\006 \001(\005\"^\n\022AppendEntriesReply\022\014\n\004Ter"
  "m\030\001 \001(\005\022\017\n\007Success\030\002 \001(\010\022\027\n\017UpdateNextIn"
  "dex\030\003 \001(\005\022\020\n\010AppState\030\004 \001(\005\"_\n\017RequestVo"
  "teArgs\022\014\n\004Term\030\001 \001(\005\022\023\n\013CandidateId\030\002 \001("
  "\005\022\024\n\014LastLogIndex\030\003 \001(\005\022\023\n\013LastLogTerm\030\004"
  " \001(\005\"H\n\020RequestVoteReply\022\014\n\004Term\030\001 \001(\005\022\023"
  "\n\013VoteGranted\030\002 \001(\010\022\021\n\tVoteState\030\003 \001(\005\"\211"
  "\001\n\026InstallSnapshotRequest\022\020\n\010LeaderId\030\001 "
  "\001(\005\022\014\n\004Term\030\002 \001(\005\022 \n\030LastSnapShotInclude"
  "Index\030\003 \001(\005\022\037\n\027LastSnapShotIncludeTerm\030\004"
  " \001(\005\022\014\n\004Data\030\005 \001(\014\"\'\n\027InstallSnapshotRes"
  "ponse\022\014\n\004Term\030\001 \001(\0052\355\001\n\007raftRpc\022H\n\rAppen"
  "dEntries\022\032.wa.raft.AppendEntriesArgs\032\033.w"
  "a.raft.AppendEntriesReply\022T\n\017InstallSnap"
  "shot\022\037.wa.raft.InstallSnapshotRequest\032 ."
  "wa.raft.InstallSnapshotResponse\022B\n\013Reque"
  "stVote\022\030.wa.raft.RequestVoteArgs\032\031.wa.ra"
  "ft.RequestVoteReplyB\003\200\001\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_raft_5fcore_5fproto_2eproto = {
  false, InitDefaults_raft_5fcore_5fproto_2eproto, 
  descriptor_table_protodef_raft_5fcore_5fproto_2eproto,
  "raft_core_proto.proto", &assign_descriptors_table_raft_5fcore_5fproto_2eproto, 952,
};

void AddDescriptors_raft_5fcore_5fproto_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_raft_5fcore_5fproto_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_5fcore_5fproto_2eproto = []() { AddDescriptors_raft_5fcore_5fproto_2eproto(); return true; }();
namespace wa {
namespace raft {

// ===================================================================

void LogEntry::InitAsDefaultInstance() {
}
class LogEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kCommandFieldNumber;
const int LogEntry::kLogTermFieldNumber;
const int LogEntry::kLogIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wa.raft.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.command().size() > 0) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  ::memcpy(&logterm_, &from.logterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&logindex_) -
    reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
  // @@protoc_insertion_point(copy_constructor:wa.raft.LogEntry)
}

void LogEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogEntry_raft_5fcore_5fproto_2eproto.base);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logindex_) -
      reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:wa.raft.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntry& LogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogEntry_raft_5fcore_5fproto_2eproto.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:wa.raft.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logindex_) -
      reinterpret_cast<char*>(&logterm_)) + sizeof(logindex_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes Command = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_command();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 LogTerm = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_logterm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 LogIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_logindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wa.raft.LogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LogTerm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wa.raft.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wa.raft.LogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wa.raft.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Command = 1;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->command(), output);
  }

  // int32 LogTerm = 2;
  if (this->logterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logterm(), output);
  }

  // int32 LogIndex = 3;
  if (this->logindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wa.raft.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wa.raft.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Command = 1;
  if (this->command().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->command(), target);
  }

  // int32 LogTerm = 2;
  if (this->logterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logterm(), target);
  }

  // int32 LogIndex = 3;
  if (this->logindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wa.raft.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wa.raft.LogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->command());
  }

  // int32 LogTerm = 2;
  if (this->logterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logterm());
  }

  // int32 LogIndex = 3;
  if (this->logindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wa.raft.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::DynamicCastToGenerated<LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wa.raft.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wa.raft.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wa.raft.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.logterm() != 0) {
    set_logterm(from.logterm());
  }
  if (from.logindex() != 0) {
    set_logindex(from.logindex());
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wa.raft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wa.raft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  command_.Swap(&other->command_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logterm_, other->logterm_);
  swap(logindex_, other->logindex_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcore_5fproto_2eproto);
  return ::file_level_metadata_raft_5fcore_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesArgs::InitAsDefaultInstance() {
}
class AppendEntriesArgs::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesArgs::kTermFieldNumber;
const int AppendEntriesArgs::kLeaderIdFieldNumber;
const int AppendEntriesArgs::kPrevLogIndexFieldNumber;
const int AppendEntriesArgs::kPrevLogTermFieldNumber;
const int AppendEntriesArgs::kEntriesFieldNumber;
const int AppendEntriesArgs::kLeaderCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesArgs::AppendEntriesArgs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wa.raft.AppendEntriesArgs)
}
AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  // @@protoc_insertion_point(copy_constructor:wa.raft.AppendEntriesArgs)
}

void AppendEntriesArgs::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AppendEntriesArgs_raft_5fcore_5fproto_2eproto.base);
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:wa.raft.AppendEntriesArgs)
  SharedDtor();
}

void AppendEntriesArgs::SharedDtor() {
}

void AppendEntriesArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesArgs& AppendEntriesArgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AppendEntriesArgs_raft_5fcore_5fproto_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:wa.raft.AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppendEntriesArgs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AppendEntriesArgs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 LeaderId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_leaderid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 PrevLogIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_prevlogindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 PrevLogTerm = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_prevlogterm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .wa.raft.LogEntry Entries = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::wa::raft::LogEntry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // int32 LeaderCommit = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_leadercommit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppendEntriesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wa.raft.AppendEntriesArgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LeaderId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PrevLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PrevLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .wa.raft.LogEntry Entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LeaderCommit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadercommit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wa.raft.AppendEntriesArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wa.raft.AppendEntriesArgs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppendEntriesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wa.raft.AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderid(), output);
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prevlogindex(), output);
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevlogterm(), output);
  }

  // repeated .wa.raft.LogEntry Entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->entries(static_cast<int>(i)),
      output);
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leadercommit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wa.raft.AppendEntriesArgs)
}

::google::protobuf::uint8* AppendEntriesArgs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wa.raft.AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderid(), target);
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prevlogindex(), target);
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevlogterm(), target);
  }

  // repeated .wa.raft.LogEntry Entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->entries(static_cast<int>(i)), target);
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leadercommit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wa.raft.AppendEntriesArgs)
  return target;
}

size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wa.raft.AppendEntriesArgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wa.raft.LogEntry Entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 LeaderId = 2;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogindex());
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogterm());
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leadercommit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wa.raft.AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesArgs* source =
      ::google::protobuf::DynamicCastToGenerated<AppendEntriesArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wa.raft.AppendEntriesArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wa.raft.AppendEntriesArgs)
    MergeFrom(*source);
  }
}

void AppendEntriesArgs::MergeFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wa.raft.AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommit() != 0) {
    set_leadercommit(from.leadercommit());
  }
}

void AppendEntriesArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wa.raft.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wa.raft.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {
  return true;
}

void AppendEntriesArgs::Swap(AppendEntriesArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(term_, other->term_);
  swap(leaderid_, other->leaderid_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(leadercommit_, other->leadercommit_);
}

::google::protobuf::Metadata AppendEntriesArgs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcore_5fproto_2eproto);
  return ::file_level_metadata_raft_5fcore_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesReply::InitAsDefaultInstance() {
}
class AppendEntriesReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesReply::kTermFieldNumber;
const int AppendEntriesReply::kSuccessFieldNumber;
const int AppendEntriesReply::kUpdateNextIndexFieldNumber;
const int AppendEntriesReply::kAppStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesReply::AppendEntriesReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wa.raft.AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&appstate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
  // @@protoc_insertion_point(copy_constructor:wa.raft.AppendEntriesReply)
}

void AppendEntriesReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appstate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:wa.raft.AppendEntriesReply)
  SharedDtor();
}

void AppendEntriesReply::SharedDtor() {
}

void AppendEntriesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesReply& AppendEntriesReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AppendEntriesReply_raft_5fcore_5fproto_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:wa.raft.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appstate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(appstate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppendEntriesReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AppendEntriesReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool Success = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 UpdateNextIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_updatenextindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 AppState = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_appstate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppendEntriesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wa.raft.AppendEntriesReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UpdateNextIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatenextindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AppState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wa.raft.AppendEntriesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wa.raft.AppendEntriesReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppendEntriesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wa.raft.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // bool Success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // int32 UpdateNextIndex = 3;
  if (this->updatenextindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->updatenextindex(), output);
  }

  // int32 AppState = 4;
  if (this->appstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->appstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wa.raft.AppendEntriesReply)
}

::google::protobuf::uint8* AppendEntriesReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wa.raft.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // bool Success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // int32 UpdateNextIndex = 3;
  if (this->updatenextindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->updatenextindex(), target);
  }

  // int32 AppState = 4;
  if (this->appstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->appstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wa.raft.AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wa.raft.AppendEntriesReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // bool Success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 UpdateNextIndex = 3;
  if (this->updatenextindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->updatenextindex());
  }

  // int32 AppState = 4;
  if (this->appstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->appstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wa.raft.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesReply* source =
      ::google::protobuf::DynamicCastToGenerated<AppendEntriesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wa.raft.AppendEntriesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wa.raft.AppendEntriesReply)
    MergeFrom(*source);
  }
}

void AppendEntriesReply::MergeFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wa.raft.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.updatenextindex() != 0) {
    set_updatenextindex(from.updatenextindex());
  }
  if (from.appstate() != 0) {
    set_appstate(from.appstate());
  }
}

void AppendEntriesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wa.raft.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wa.raft.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::Swap(AppendEntriesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(success_, other->success_);
  swap(updatenextindex_, other->updatenextindex_);
  swap(appstate_, other->appstate_);
}

::google::protobuf::Metadata AppendEntriesReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcore_5fproto_2eproto);
  return ::file_level_metadata_raft_5fcore_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteArgs::InitAsDefaultInstance() {
}
class RequestVoteArgs::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteArgs::kTermFieldNumber;
const int RequestVoteArgs::kCandidateIdFieldNumber;
const int RequestVoteArgs::kLastLogIndexFieldNumber;
const int RequestVoteArgs::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteArgs::RequestVoteArgs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wa.raft.RequestVoteArgs)
}
RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:wa.raft.RequestVoteArgs)
}

void RequestVoteArgs::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:wa.raft.RequestVoteArgs)
  SharedDtor();
}

void RequestVoteArgs::SharedDtor() {
}

void RequestVoteArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteArgs& RequestVoteArgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestVoteArgs_raft_5fcore_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:wa.raft.RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestVoteArgs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestVoteArgs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 CandidateId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_candidateid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 LastLogIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lastlogindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 LastLogTerm = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lastlogterm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestVoteArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wa.raft.RequestVoteArgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CandidateId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wa.raft.RequestVoteArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wa.raft.RequestVoteArgs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestVoteArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wa.raft.RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->candidateid(), output);
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastlogindex(), output);
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastlogterm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wa.raft.RequestVoteArgs)
}

::google::protobuf::uint8* RequestVoteArgs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wa.raft.RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->candidateid(), target);
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastlogindex(), target);
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastlogterm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wa.raft.RequestVoteArgs)
  return target;
}

size_t RequestVoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wa.raft.RequestVoteArgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 CandidateId = 2;
  if (this->candidateid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candidateid());
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogindex());
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wa.raft.RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteArgs* source =
      ::google::protobuf::DynamicCastToGenerated<RequestVoteArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wa.raft.RequestVoteArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wa.raft.RequestVoteArgs)
    MergeFrom(*source);
  }
}

void RequestVoteArgs::MergeFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wa.raft.RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.candidateid() != 0) {
    set_candidateid(from.candidateid());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
}

void RequestVoteArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wa.raft.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wa.raft.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {
  return true;
}

void RequestVoteArgs::Swap(RequestVoteArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(candidateid_, other->candidateid_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
}

::google::protobuf::Metadata RequestVoteArgs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcore_5fproto_2eproto);
  return ::file_level_metadata_raft_5fcore_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteReply::InitAsDefaultInstance() {
}
class RequestVoteReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteReply::kTermFieldNumber;
const int RequestVoteReply::kVoteGrantedFieldNumber;
const int RequestVoteReply::kVoteStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteReply::RequestVoteReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wa.raft.RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votestate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
  // @@protoc_insertion_point(copy_constructor:wa.raft.RequestVoteReply)
}

void RequestVoteReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votestate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:wa.raft.RequestVoteReply)
  SharedDtor();
}

void RequestVoteReply::SharedDtor() {
}

void RequestVoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteReply& RequestVoteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestVoteReply_raft_5fcore_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:wa.raft.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votestate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votestate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestVoteReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestVoteReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool VoteGranted = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_votegranted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 VoteState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_votestate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestVoteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wa.raft.RequestVoteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool VoteGranted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VoteState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votestate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wa.raft.RequestVoteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wa.raft.RequestVoteReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestVoteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wa.raft.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  // int32 VoteState = 3;
  if (this->votestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->votestate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wa.raft.RequestVoteReply)
}

::google::protobuf::uint8* RequestVoteReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wa.raft.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  // int32 VoteState = 3;
  if (this->votestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->votestate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wa.raft.RequestVoteReply)
  return target;
}

size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wa.raft.RequestVoteReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  // int32 VoteState = 3;
  if (this->votestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->votestate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wa.raft.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteReply* source =
      ::google::protobuf::DynamicCastToGenerated<RequestVoteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wa.raft.RequestVoteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wa.raft.RequestVoteReply)
    MergeFrom(*source);
  }
}

void RequestVoteReply::MergeFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wa.raft.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.votegranted() != 0) {
    set_votegranted(from.votegranted());
  }
  if (from.votestate() != 0) {
    set_votestate(from.votestate());
  }
}

void RequestVoteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wa.raft.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wa.raft.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  return true;
}

void RequestVoteReply::Swap(RequestVoteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(votegranted_, other->votegranted_);
  swap(votestate_, other->votestate_);
}

::google::protobuf::Metadata RequestVoteReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcore_5fproto_2eproto);
  return ::file_level_metadata_raft_5fcore_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InstallSnapshotRequest::InitAsDefaultInstance() {
}
class InstallSnapshotRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallSnapshotRequest::kLeaderIdFieldNumber;
const int InstallSnapshotRequest::kTermFieldNumber;
const int InstallSnapshotRequest::kLastSnapShotIncludeIndexFieldNumber;
const int InstallSnapshotRequest::kLastSnapShotIncludeTermFieldNumber;
const int InstallSnapshotRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallSnapshotRequest::InstallSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wa.raft.InstallSnapshotRequest)
}
InstallSnapshotRequest::InstallSnapshotRequest(const InstallSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&leaderid_, &from.leaderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
    reinterpret_cast<char*>(&leaderid_)) + sizeof(lastsnapshotincludeterm_));
  // @@protoc_insertion_point(copy_constructor:wa.raft.InstallSnapshotRequest)
}

void InstallSnapshotRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InstallSnapshotRequest_raft_5fcore_5fproto_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&leaderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
      reinterpret_cast<char*>(&leaderid_)) + sizeof(lastsnapshotincludeterm_));
}

InstallSnapshotRequest::~InstallSnapshotRequest() {
  // @@protoc_insertion_point(destructor:wa.raft.InstallSnapshotRequest)
  SharedDtor();
}

void InstallSnapshotRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstallSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstallSnapshotRequest& InstallSnapshotRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InstallSnapshotRequest_raft_5fcore_5fproto_2eproto.base);
  return *internal_default_instance();
}


void InstallSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wa.raft.InstallSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&leaderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastsnapshotincludeterm_) -
      reinterpret_cast<char*>(&leaderid_)) + sizeof(lastsnapshotincludeterm_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstallSnapshotRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InstallSnapshotRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_leaderid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 Term = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 LastSnapShotIncludeIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lastsnapshotincludeindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 LastSnapShotIncludeTerm = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lastsnapshotincludeterm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes Data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstallSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wa.raft.InstallSnapshotRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastSnapShotIncludeIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastsnapshotincludeindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastSnapShotIncludeTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastsnapshotincludeterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wa.raft.InstallSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wa.raft.InstallSnapshotRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstallSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wa.raft.InstallSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leaderid(), output);
  }

  // int32 Term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->term(), output);
  }

  // int32 LastSnapShotIncludeIndex = 3;
  if (this->lastsnapshotincludeindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastsnapshotincludeindex(), output);
  }

  // int32 LastSnapShotIncludeTerm = 4;
  if (this->lastsnapshotincludeterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastsnapshotincludeterm(), output);
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wa.raft.InstallSnapshotRequest)
}

::google::protobuf::uint8* InstallSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wa.raft.InstallSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leaderid(), target);
  }

  // int32 Term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->term(), target);
  }

  // int32 LastSnapShotIncludeIndex = 3;
  if (this->lastsnapshotincludeindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastsnapshotincludeindex(), target);
  }

  // int32 LastSnapShotIncludeTerm = 4;
  if (this->lastsnapshotincludeterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastsnapshotincludeterm(), target);
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wa.raft.InstallSnapshotRequest)
  return target;
}

size_t InstallSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wa.raft.InstallSnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 Term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 LastSnapShotIncludeIndex = 3;
  if (this->lastsnapshotincludeindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastsnapshotincludeindex());
  }

  // int32 LastSnapShotIncludeTerm = 4;
  if (this->lastsnapshotincludeterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastsnapshotincludeterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstallSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wa.raft.InstallSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapshotRequest* source =
      ::google::protobuf::DynamicCastToGenerated<InstallSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wa.raft.InstallSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wa.raft.InstallSnapshotRequest)
    MergeFrom(*source);
  }
}

void InstallSnapshotRequest::MergeFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wa.raft.InstallSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.lastsnapshotincludeindex() != 0) {
    set_lastsnapshotincludeindex(from.lastsnapshotincludeindex());
  }
  if (from.lastsnapshotincludeterm() != 0) {
    set_lastsnapshotincludeterm(from.lastsnapshotincludeterm());
  }
}

void InstallSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wa.raft.InstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotRequest::CopyFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wa.raft.InstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotRequest::IsInitialized() const {
  return true;
}

void InstallSnapshotRequest::Swap(InstallSnapshotRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallSnapshotRequest::InternalSwap(InstallSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leaderid_, other->leaderid_);
  swap(term_, other->term_);
  swap(lastsnapshotincludeindex_, other->lastsnapshotincludeindex_);
  swap(lastsnapshotincludeterm_, other->lastsnapshotincludeterm_);
}

::google::protobuf::Metadata InstallSnapshotRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcore_5fproto_2eproto);
  return ::file_level_metadata_raft_5fcore_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InstallSnapshotResponse::InitAsDefaultInstance() {
}
class InstallSnapshotResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallSnapshotResponse::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallSnapshotResponse::InstallSnapshotResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wa.raft.InstallSnapshotResponse)
}
InstallSnapshotResponse::InstallSnapshotResponse(const InstallSnapshotResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:wa.raft.InstallSnapshotResponse)
}

void InstallSnapshotResponse::SharedCtor() {
  term_ = 0;
}

InstallSnapshotResponse::~InstallSnapshotResponse() {
  // @@protoc_insertion_point(destructor:wa.raft.InstallSnapshotResponse)
  SharedDtor();
}

void InstallSnapshotResponse::SharedDtor() {
}

void InstallSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstallSnapshotResponse& InstallSnapshotResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InstallSnapshotResponse_raft_5fcore_5fproto_2eproto.base);
  return *internal_default_instance();
}


void InstallSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wa.raft.InstallSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstallSnapshotResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InstallSnapshotResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstallSnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wa.raft.InstallSnapshotResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wa.raft.InstallSnapshotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wa.raft.InstallSnapshotResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstallSnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wa.raft.InstallSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wa.raft.InstallSnapshotResponse)
}

::google::protobuf::uint8* InstallSnapshotResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wa.raft.InstallSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wa.raft.InstallSnapshotResponse)
  return target;
}

size_t InstallSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wa.raft.InstallSnapshotResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstallSnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wa.raft.InstallSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallSnapshotResponse* source =
      ::google::protobuf::DynamicCastToGenerated<InstallSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wa.raft.InstallSnapshotResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wa.raft.InstallSnapshotResponse)
    MergeFrom(*source);
  }
}

void InstallSnapshotResponse::MergeFrom(const InstallSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wa.raft.InstallSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
}

void InstallSnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wa.raft.InstallSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotResponse::CopyFrom(const InstallSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wa.raft.InstallSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResponse::IsInitialized() const {
  return true;
}

void InstallSnapshotResponse::Swap(InstallSnapshotResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallSnapshotResponse::InternalSwap(InstallSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
}

::google::protobuf::Metadata InstallSnapshotResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcore_5fproto_2eproto);
  return ::file_level_metadata_raft_5fcore_5fproto_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raft
}  // namespace wa
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::wa::raft::LogEntry* Arena::CreateMaybeMessage< ::wa::raft::LogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::wa::raft::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::wa::raft::AppendEntriesArgs* Arena::CreateMaybeMessage< ::wa::raft::AppendEntriesArgs >(Arena* arena) {
  return Arena::CreateInternal< ::wa::raft::AppendEntriesArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::wa::raft::AppendEntriesReply* Arena::CreateMaybeMessage< ::wa::raft::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateInternal< ::wa::raft::AppendEntriesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::wa::raft::RequestVoteArgs* Arena::CreateMaybeMessage< ::wa::raft::RequestVoteArgs >(Arena* arena) {
  return Arena::CreateInternal< ::wa::raft::RequestVoteArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::wa::raft::RequestVoteReply* Arena::CreateMaybeMessage< ::wa::raft::RequestVoteReply >(Arena* arena) {
  return Arena::CreateInternal< ::wa::raft::RequestVoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::wa::raft::InstallSnapshotRequest* Arena::CreateMaybeMessage< ::wa::raft::InstallSnapshotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::wa::raft::InstallSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wa::raft::InstallSnapshotResponse* Arena::CreateMaybeMessage< ::wa::raft::InstallSnapshotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::wa::raft::InstallSnapshotResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
